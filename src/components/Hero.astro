---
import { Image } from 'astro:assets';
import heroImage from '../assets/images/hero.png';
---

<section class="relative min-h-[85vh] flex items-center overflow-hidden bg-gradient-to-br from-primary/5 via-light to-white">
  <!-- Background Elements -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="absolute -top-40 -right-40 w-96 h-96 bg-accent/10 rounded-full blur-3xl"></div>
    <div class="absolute -bottom-40 -left-40 w-96 h-96 bg-primary/10 rounded-full blur-3xl"></div>
  </div>

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 relative">
    <div class="grid lg:grid-cols-2 gap-12 items-center">
      <!-- Text Content -->
      <div class="text-center lg:text-left" data-aos="fade-right">
        <div class="inline-block">
          <span class="inline-flex items-center px-4 py-1.5 rounded-full text-sm font-medium bg-accent/10 text-accent mb-4">
            <span class="animate-pulse mr-2">ðŸš€</span>
            Innowacyjne rozwiÄ…zania cyfrowe
          </span>
        </div>
        
        <!-- Typewriter Effect -->
        <div x-data="{
          lines: [
            { text: 'PrzeksztaÅ‚camy', visible: false },
            { text: 'pomysÅ‚y', visible: false },
            { text: 'w cyfrowÄ…', visible: false },
            { text: 'rzeczywistoÅ›Ä‡', visible: false }
          ],
          currentLine: 0,
          charIndex: 0,
          isTyping: true,
          init() {
            this.typeNextLine();
          },
          typeNextLine() {
            if (this.currentLine >= this.lines.length) {
              this.isTyping = false;
              this.showAllLines();
              return;
            }

            const line = this.lines[this.currentLine];
            const text = line.text;
            
            if (this.charIndex <= text.length) {
              this.lines[this.currentLine].visible = true;
              setTimeout(() => {
                this.charIndex++;
                this.typeNextLine();
              }, 100);
            } else {
              this.currentLine++;
              this.charIndex = 0;
              setTimeout(() => {
                this.typeNextLine();
              }, 500);
            }
          },
          showAllLines() {
            this.lines.forEach(line => line.visible = true);
          }
        }" class="mb-6">
          <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-primary leading-tight relative">
            <template x-for="(line, index) in lines" :key="index">
              <div 
                x-show="line.visible"
                x-transition:enter="transition-all duration-500"
                x-transition:enter-start="opacity-0 transform translate-y-4"
                x-transition:enter-end="opacity-100 transform translate-y-0"
                class="mb-2"
              >
                <span 
                  x-text="isTyping && currentLine === index ? line.text.substring(0, charIndex) : line.text"
                  :class="{
                    'bg-gradient-to-r from-accent to-[#203951] bg-clip-text text-transparent': index === 1 || index === 3,
                    'relative inline-block': true
                  }"
                ></span>
                <span 
                  x-show="isTyping && currentLine === index" 
                  class="typing-cursor"
                >|</span>
              </div>
            </template>
          </h1>
        </div>

        <p class="text-lg md:text-xl text-secondary mb-8 max-w-2xl mx-auto lg:mx-0" data-aos="fade-up" data-aos-delay="100">
          Tworzymy nowoczesne strony internetowe i aplikacje, ktÃ³re pomagajÄ… firmom osiÄ…gaÄ‡ sukces w cyfrowym Å›wiecie.
        </p>
        
        <!-- CTA Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start" data-aos="fade-up" data-aos-delay="200">
          <a href="/kontakt" class="cta-button px-8 py-4 bg-[#203951] text-white rounded-full font-medium text-lg group relative overflow-hidden">
            <span class="relative z-10 flex items-center justify-center">
              Rozpocznij projekt
              <svg class="w-5 h-5 ml-2 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
              </svg>
            </span>
          </a>
          <a href="/realizacje" class="cta-button-secondary px-8 py-4 border-2 border-primary text-primary rounded-full font-medium text-lg hover:text-white relative overflow-hidden group">
            <span class="relative z-10 flex items-center justify-center">
              Zobacz realizacje
              <svg class="w-5 h-5 ml-2 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"/>
              </svg>
            </span>
          </a>
        </div>

        <!-- Trust Indicators -->
        <div class="mt-12 grid grid-cols-2 md:grid-cols-4 gap-6 items-center justify-center lg:justify-start text-center lg:text-left" data-aos="fade-up" data-aos-delay="300">
          {[
            { number: '98%', label: 'Zadowolonych klientÃ³w' },
            { number: '250+', label: 'ProjektÃ³w' },
            { number: '10+', label: 'Lat doÅ›wiadczenia' },
            { number: '24/7', label: 'Wsparcie' }
          ].map(stat => (
            <div class="glass p-4 rounded-xl hover:scale-105 transition-transform">
              <div class="text-2xl font-bold text-accent mb-1">{stat.number}</div>
              <div class="text-sm text-secondary">{stat.label}</div>
            </div>
          ))}
        </div>
      </div>

      <!-- Hero Image -->
      <div class="relative" data-aos="fade-left">
        <div class="relative z-10 animate-float">
          <Image
            src={heroImage}
            alt="Hero Image"
            class="w-full h-auto max-w-2xl mx-auto rounded-2xl shadow-2xl"
            width={600}
            height={400}
          />
        </div>
        <!-- Decorative Elements -->
        <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full h-full max-w-2xl">
          <div class="absolute top-0 right-0 w-32 h-32 bg-accent/10 rounded-full blur-2xl"></div>
          <div class="absolute bottom-0 left-0 w-32 h-32 bg-primary/10 rounded-full blur-2xl"></div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes float {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .glass {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .typing-cursor {
    display: inline-block;
    width: 2px;
    animation: blink 1s infinite;
    margin-left: 2px;
  }

  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }

  .cta-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(255,255,255,0.1), rgba(255,255,255,0));
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }

  .cta-button:hover::before {
    transform: translateX(100%);
  }

  .cta-button-secondary::before {
    background: #203951;
  }
</style>